/*
 * Copyright 2014 Peti Koch und Adrian Elsener
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.petikoch.libs.jtwfg;

import ch.petikoch.libs.jtwfg.assertion.Preconditions;

import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;

class Task<T> {

	private final T id;
	private final Set<Task<T>> waitForTasks = new LinkedHashSet<>();

	Task(T id) {
		Preconditions.checkNotNull(id, "ID must not be null");
		this.id = id;
	}

	private static <T> Task<T> deepCopy(Task<T> task, Set<Task<T>> alreadyCopiedTasks) {
		Task<T> result = new Task<>(task.getId());
		if (!alreadyCopiedTasks.contains(task)) {
			alreadyCopiedTasks.add(result);
			for (Task<T> waitForTask : task.getWaitForTasks()) {
				result.addWaitFor(deepCopy(waitForTask, alreadyCopiedTasks));
			}
		}
		return result;
	}

	Task addWaitFor(Task<T> other) {
		waitForTasks.add(other);
		return this;
	}

	Set<Task<T>> getWaitForTasks() {
		return waitForTasks;
	}

	T getId() {
		return id;
	}

	// generated by IntelliJ IDEA
	@SuppressWarnings("RedundantIfStatement")
	@Override
	public boolean equals(final Object o) {
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;

		final Task task = (Task) o;

		if (!id.equals(task.id)) return false;

		return true;
	}

	// generated by IntelliJ IDEA
	@Override
	public int hashCode() {
		return id.hashCode();
	}

	// generated by IntelliJ IDEA
	@Override
	public String toString() {
		return "Task{" +
				"id=" + id +
				'}';
	}

	Task<T> deepCopy() {
		Set<Task<T>> alreadyCopiedTasks = new HashSet<>();
		return deepCopy(this, alreadyCopiedTasks);
	}
}
